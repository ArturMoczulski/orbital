{"version":3,"file":"intervals-monitor.service.js","sourceRoot":"","sources":["intervals-monitor.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Global, Injectable, Logger } from \"@nestjs/common\";\nimport humanizeDuration from \"humanize-duration\";\nimport {\n  IntervalsRegistryService,\n  IntervalState,\n} from \"./intervals-registry.service\";\nconst Table = require(\"cli-table3\");\n\n@Global()\n@Injectable()\nexport class IntervalsMonitorService {\n  private readonly logger = new Logger(IntervalsMonitorService.name);\n\n  constructor(private readonly intervalsRegistry: IntervalsRegistryService) {}\n\n  /**\n   * Build a CLI Table of the current intervals' status.\n   *\n   */\n  public table() {\n    const report = this.intervalsRegistry.getStatusReport();\n    if (report.length === 0) {\n      return undefined;\n    }\n\n    // Create the table with a header row\n    const table = new Table({\n      head: [\"Name\", \"Interval\", \"Status\", \"Profile\"],\n      style: {\n        head: [\"green\"], // header text color\n        border: [\"yellow\"], // border color\n      },\n    });\n\n    // Populate rows\n    for (const item of report) {\n      // Look up the record to get its configured `intervalMs`\n      const record = this.intervalsRegistry.getIntervalRecord(item.key);\n      const intervalMs = record ? record.intervalMs : 0;\n\n      const intervalText = this.humanizeDuration(intervalMs);\n      const durationText = this.humanizeDuration(item.lastDuration);\n      const statusEmoji = this.stateToEmoji(item.status);\n\n      table.push([\n        item.key, // e.g. \"MyService.myMethod\"\n        intervalText, // e.g. \"1s\" or \"500ms\"\n        statusEmoji, // e.g. \"üîÅ\" for RUNNING\n        durationText, // lastDuration as e.g. \"3s\"\n      ]);\n    }\n\n    return table;\n  }\n\n  /**\n   * Print the table to the logger.\n   */\n  public printStatusReport(): void {\n    const tbl = this.table();\n    if (tbl) {\n      this.logger.log(\"\\n\" + tbl.toString() + \"\\n\");\n    } else {\n      this.logger.log(\"No intervals found.\");\n    }\n  }\n\n  /**\n   * Convert milliseconds into a short human-readable string (e.g. \"3s\", \"500ms\").\n   */\n  private humanizeDuration(milliseconds: number): string {\n    return humanizeDuration(milliseconds, {\n      units: [\"m\", \"s\", \"ms\"],\n    });\n  }\n\n  /**\n   * Map an IntervalState to an emoji or short string.\n   */\n  private stateToEmoji(state: IntervalState): string {\n    switch (state) {\n      case IntervalState.RUNNING:\n        return \"üîÅ\";\n      case IntervalState.HEALTHY:\n        return \"‚úÖ\";\n      case IntervalState.STOPPED:\n        return \"üõë\";\n      case IntervalState.LATE:\n        return \"‚è∞\";\n      case IntervalState.SLOW:\n        return \"üêå\";\n      case IntervalState.ERROR:\n        return \"‚ùå\";\n      case IntervalState.JAMMED:\n        return \"üöß\";\n      case IntervalState.INIT:\n        return \"üÜï\";\n      case IntervalState.CONDITIONS_NOT_MET:\n        return \"üö´\";\n      case IntervalState.MICROSERVICES_UNAVAILABLE:\n        return \"üîå\";\n      default:\n        return state;\n    }\n  }\n}\n"]}