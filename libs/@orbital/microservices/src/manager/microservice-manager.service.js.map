{"version":3,"file":"microservice-manager.service.js","sourceRoot":"","sources":["microservice-manager.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Global,\n  Inject,\n  Injectable,\n  Logger,\n  OnModuleDestroy,\n  OnModuleInit,\n} from \"@nestjs/common\";\nimport { EventEmitter2 } from \"@nestjs/event-emitter\";\nimport { ClientProxy } from \"@nestjs/microservices\";\nimport { NatsConnection } from \"nats\";\nimport { Microservice } from \"../microservice\";\n\n/**\n * Events emitted when microservices go up or down.\n */\nexport enum MicroserviceManagerEvents {\n  Available = \"microservice.available\",\n  Unavailable = \"microservice.unavailable\",\n}\n\n/**\n * Watches the NATS Service Framework for service-heartbeats\n * and emits Nest events when service status changes.\n */\n/**\n * Registry of known microservices for health monitoring.\n */\nexport class MicroserviceRegistry {\n  private static instance: MicroserviceRegistry;\n  private services: Set<string> = new Set();\n\n  private constructor() {}\n\n  static getInstance(): MicroserviceRegistry {\n    if (!MicroserviceRegistry.instance) {\n      MicroserviceRegistry.instance = new MicroserviceRegistry();\n    }\n    return MicroserviceRegistry.instance;\n  }\n\n  register(serviceName: string): void {\n    this.services.add(serviceName);\n  }\n\n  getAll(): string[] {\n    return Array.from(this.services);\n  }\n}\n\n/**\n * Watches the NATS Service Framework for service-heartbeats\n * and emits Nest events when service status changes.\n */\n@Global()\n@Injectable()\nexport class MicroserviceManagerService\n  extends Microservice\n  implements OnModuleInit, OnModuleDestroy\n{\n  private readonly logger = new Logger(MicroserviceManagerService.name);\n  private readonly registry = MicroserviceRegistry.getInstance();\n  private readonly statusMap: Record<string, boolean> = {};\n\n  constructor(\n    @Inject(\"NATS_CLIENT\") clientProxy: ClientProxy,\n    @Inject(\"NatsConnection\") private readonly nc: NatsConnection,\n    private readonly eventEmitter: EventEmitter2\n  ) {\n    super(clientProxy);\n  }\n\n  /**\n   * Register a microservice for health monitoring\n   */\n  registerService(serviceName: string): void {\n    this.registry.register(serviceName);\n    this.logger.log(`Registered service for monitoring: ${serviceName}`);\n  }\n\n  async onModuleInit() {\n    try {\n      // Check if NATS services API is available\n      // @ts-ignore - Ignore TypeScript error for NATS services API\n      if (this.nc.services && typeof this.nc.services.watch === \"function\") {\n        // Get a service watcher for all services (*)\n        // @ts-ignore - Ignore TypeScript error for NATS services API\n        const iter = this.nc.services.watch(\"*\");\n\n        // Start async processing of service events\n        (async () => {\n          for await (const ev of iter) {\n            // Check if service is up based on status\n            const up = ev.status === \"OK\";\n\n            // Emit the appropriate event with service info\n            this.eventEmitter.emit(\n              up\n                ? MicroserviceManagerEvents.Available\n                : MicroserviceManagerEvents.Unavailable,\n              { microservice: ev.name }\n            );\n          }\n        })().catch((err) => {\n          console.error(\"Error in microservice watcher:\", err);\n        });\n      } else {\n        console.log(\n          \"NATS services API not available, microservice watcher disabled\"\n        );\n      }\n    } catch (err) {\n      console.error(\"Failed to initialize microservice watcher:\", err);\n    }\n  }\n\n  /**\n   * Clean up resources on module destroy\n   */\n  onModuleDestroy() {\n    // Close any resources if needed\n    this.logger.log(\"Cleaning up microservice manager resources\");\n  }\n}\n"]}