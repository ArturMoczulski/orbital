{"version":3,"file":"microservice-manager.module.js","sourceRoot":"","sources":["microservice-manager.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,2CAMwB;AACxB,yDAA8E;AAC9E,iFAA4E;AAC5E,yDAAsD;AA2DtD;;;;GAIG;AAGI,IAAM,yBAAyB,iCAA/B,MAAM,yBAAyB;IACpC;;;;;;OAMG;IACH,MAAM,CAAC,OAAO,CACZ,UAA4C,EAAE;QAE9C,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,aAAa,CAAC;QACzD,MAAM,eAAe,GAAG,OAAO,CAAC,eAAe,IAAI,gBAAgB,CAAC;QACpE,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,uBAAuB,CAAC;QAE3D,OAAO;YACL,MAAM,EAAE,2BAAyB;YACjC,OAAO,EAAE,CAAC,6BAAa,CAAC;YACxB,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,yDAA0B;oBACnC,UAAU,EAAE,CAAC,WAAW,EAAE,cAAc,EAAE,YAAY,EAAE,EAAE;wBACxD,OAAO,IAAI,yDAA0B,CACnC,WAAW,EACX,cAAc,EACd,YAAY,CACb,CAAC;oBACJ,CAAC;oBACD,MAAM,EAAE,CAAC,WAAW,EAAE,eAAe,EAAE,6BAAa,CAAC,IAAI,CAAC;iBAC3D;aACF;YACD,OAAO,EAAE,CAAC,yDAA0B,CAAC;SACtC,CAAC;IACJ,CAAC;CACF,CAAA;AAlCY,8DAAyB;oCAAzB,yBAAyB;IAFrC,IAAA,eAAM,GAAE;IACR,IAAA,eAAM,EAAC,EAAE,CAAC;GACE,yBAAyB,CAkCrC","sourcesContent":["import {\n  DynamicModule,\n  Module,\n  ModuleMetadata,\n  Provider,\n  Global,\n} from \"@nestjs/common\";\nimport { ClientProxy, ClientsModule, Transport } from \"@nestjs/microservices\";\nimport { MicroserviceManagerService } from \"./microservice-manager.service\";\nimport { EventEmitter2 } from \"@nestjs/event-emitter\";\n\n/**\n * Options for configuring the MicroserviceManagerModule\n */\nexport interface MicroserviceManagerModuleOptions {\n  /**\n   * Optional custom token name for the NATS client\n   * @default \"NATS_CLIENT\"\n   */\n  clientToken?: string;\n\n  /**\n   * Optional custom token name for the NATS connection\n   * @default \"NatsConnection\"\n   */\n  connectionToken?: string;\n\n  /**\n   * Optional NATS server URL\n   * @default \"nats://localhost:4222\"\n   */\n  natsUrl?: string;\n}\n\n/**\n * Async options for configuring the MicroserviceManagerModule\n */\nexport interface MicroserviceManagerModuleAsyncOptions {\n  /**\n   * Optional custom token name for the NATS client\n   * @default \"NATS_CLIENT\"\n   */\n  clientToken?: string;\n\n  /**\n   * Optional custom token name for the NATS connection\n   * @default \"NatsConnection\"\n   */\n  connectionToken?: string;\n\n  /**\n   * Optional imports to be included in the module\n   */\n  imports?: any[];\n\n  /**\n   * Factory function to create the MicroserviceManagerService\n   */\n  useFactory?: (\n    ...args: any[]\n  ) => Promise<MicroserviceManagerService> | MicroserviceManagerService;\n\n  /**\n   * Dependencies to inject into the factory function\n   */\n  inject?: any[];\n}\n\n/**\n * Module for microservice discovery and health monitoring.\n * Provides the MicroserviceManagerService which monitors microservice availability\n * and emits events when services go up or down.\n */\n@Global()\n@Module({})\nexport class MicroserviceManagerModule {\n  /**\n   * Configure the MicroserviceManagerModule to use existing NATS client and connection\n   * from the application module.\n   *\n   * @param options Configuration options\n   * @returns Dynamic module configuration\n   */\n  static forRoot(\n    options: MicroserviceManagerModuleOptions = {}\n  ): DynamicModule {\n    const clientToken = options.clientToken || \"NATS_CLIENT\";\n    const connectionToken = options.connectionToken || \"NatsConnection\";\n    const natsUrl = options.natsUrl || \"nats://localhost:4222\";\n\n    return {\n      module: MicroserviceManagerModule,\n      imports: [ClientsModule],\n      providers: [\n        {\n          provide: MicroserviceManagerService,\n          useFactory: (clientProxy, natsConnection, eventEmitter) => {\n            return new MicroserviceManagerService(\n              clientProxy,\n              natsConnection,\n              eventEmitter\n            );\n          },\n          inject: [clientToken, connectionToken, EventEmitter2.name],\n        },\n      ],\n      exports: [MicroserviceManagerService],\n    };\n  }\n}\n"]}