{"version":3,"file":"microservice-exception.filter.js","sourceRoot":"","sources":["microservice-exception.filter.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,2CAA+E;AAC/E,sDAA8B;AAC9B,+BAAkC;AAElC;;GAEG;AAEI,IAAM,2BAA2B,mCAAjC,MAAM,2BAA2B;IAAjC;QACY,WAAM,GAAG,IAAI,eAAM,CAAC,6BAA2B,CAAC,IAAI,CAAC,CAAC;IAgBzE,CAAC;IAdC,KAAK,CAAC,SAAc,EAAE,IAAmB;QACvC,IAAI,IAAI,CAAC,OAAO,EAAE,KAAK,KAAK,EAAE,CAAC;YAC7B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,IAAI,SAAS,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;YACnE,OAAO,IAAA,iBAAU,EAAC,GAAG,EAAE,CAAC,CAAC;gBACvB,MAAM,EAAE,SAAS,CAAC,MAAM,IAAI,OAAO;gBACnC,OAAO,EACL,cAAc,iBAAO,CAAC,GAAG,CAAC,YAAY,IAAI,QAAQ,iBAAiB;oBACnE,CAAC,SAAS,CAAC,OAAO,IAAI,eAAe,CAAC;gBACxC,KAAK,EAAE,SAAS,CAAC,KAAK;aACvB,CAAC,CAAC,CAAC;QACN,CAAC;QAED,MAAM,SAAS,CAAC;IAClB,CAAC;CACF,CAAA;AAjBY,kEAA2B;sCAA3B,2BAA2B;IADvC,IAAA,cAAK,GAAE;GACK,2BAA2B,CAiBvC","sourcesContent":["import { ArgumentsHost, Catch, ExceptionFilter, Logger } from \"@nestjs/common\";\nimport process from \"process\";\nimport { throwError } from \"rxjs\";\n\n/**\n * Catches all exceptions in RPC context and wraps them in an observable error object.\n */\n@Catch()\nexport class MicroserviceExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger(MicroserviceExceptionFilter.name);\n\n  catch(exception: any, host: ArgumentsHost): any {\n    if (host.getType() === \"rpc\") {\n      this.logger.error(exception.message || exception, exception.stack);\n      return throwError(() => ({\n        status: exception.status || \"error\",\n        message:\n          `Error from ${process.env.SERVICE_NAME || \"remote\"} microservice: ` +\n          (exception.message || \"Unknown error\"),\n        stack: exception.stack,\n      }));\n    }\n\n    throw exception;\n  }\n}\n"]}