{"version":3,"file":"pass-through-rpc-exception.filter.js","sourceRoot":"","sources":["pass-through-rpc-exception.filter.ts"],"names":[],"mappings":"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","sourcesContent":["import { ArgumentsHost, Catch, ExceptionFilter, Logger } from \"@nestjs/common\";\nimport { RpcException } from \"@nestjs/microservices\";\nimport { OrbitalMicroservices } from \"@orbital/contracts\";\nimport process from \"process\";\nimport { Observable, throwError } from \"rxjs\";\nimport { RemoteMicroserviceError } from \"../errors\";\n\n/**\n * Exception filter for microservices that preserves original error details in RPC responses.\n *\n * This filter is designed to be used in microservices to ensure that error details,\n * including stack traces and additional context, are properly serialized and passed\n * through to the client. This makes debugging easier by preserving the original\n * error information across service boundaries.\n */\n@Catch()\nexport class PassThroughRpcExceptionFilter implements ExceptionFilter {\n  private readonly logger = new Logger(PassThroughRpcExceptionFilter.name);\n  private readonly serviceName: string;\n\n  /**\n   * Creates a new instance of the PassThroughRpcExceptionFilter.\n   *\n   * @param serviceName The name of the microservice using this filter.\n   *                    Used to identify the source of errors.\n   *                    Can be a string or an OrbitalMicroservices enum value.\n   */\n  constructor(serviceName?: string | OrbitalMicroservices) {\n    this.serviceName =\n      serviceName?.toString() || process.env.SERVICE_NAME || \"unknown\";\n  }\n\n  catch(exception: any, host: ArgumentsHost): Observable<never> | void {\n    const ctxType = host.getType();\n    this.logger.error(`triggered ${this.serviceName} exception filter`);\n\n    // Log the exception with more details\n    this.logger.error(\n      `Exception in ${ctxType} context: ${\n        exception instanceof Error\n          ? exception.message\n          : JSON.stringify(exception)\n      }`,\n      exception instanceof Error ? exception.stack : undefined\n    );\n\n    // Log more details about the exception for debugging\n    this.logger.error(\n      `Full exception details: ${JSON.stringify(\n        {\n          type: exception?.constructor?.name,\n          message: exception?.message,\n          isError: exception instanceof Error,\n          isRpcException: exception instanceof RpcException,\n          stack: exception?.stack?.split(\"\\n\").slice(0, 5),\n          context: ctxType,\n          properties: Object.getOwnPropertyNames(exception || {}),\n        },\n        null,\n        2\n      )}`\n    );\n\n    // Only handle RPC context\n    if (ctxType !== \"rpc\") {\n      throw exception;\n    }\n\n    // Create a serializable error object\n    const serializableError: Record<string, any> = {};\n\n    if (exception instanceof Error) {\n      // Add standard error properties\n      serializableError.name = exception.name || \"Error\";\n      serializableError.message = exception.message || \"Unknown error\";\n      serializableError.stack = exception.stack;\n\n      // Add any additional properties from the error object\n      Object.getOwnPropertyNames(exception).forEach((prop) => {\n        if (prop !== \"name\" && prop !== \"message\" && prop !== \"stack\") {\n          serializableError[prop] = (exception as any)[prop];\n        }\n      });\n    } else {\n      // For non-Error objects, just stringify\n      serializableError.data = JSON.stringify(exception);\n    }\n\n    // If it's already an RpcException, extract its error\n    if (exception instanceof RpcException) {\n      const originalError = exception.getError();\n\n      // Enhance the error with additional information\n      const enhancedError = {\n        ...(typeof originalError === \"object\"\n          ? originalError\n          : { message: originalError }),\n        service: this.serviceName,\n        timestamp: new Date().toISOString(),\n        stack: exception instanceof Error ? exception.stack : undefined,\n        originalError: serializableError,\n      };\n\n      return throwError(\n        () =>\n          new RemoteMicroserviceError(\n            this.serviceName,\n            \"unknown\",\n            enhancedError\n          )\n      );\n    }\n\n    // For other types of exceptions, create a new RpcException with detailed information\n    const errorPayload = {\n      code: \"INTERNAL_SERVER_ERROR\",\n      service: this.serviceName,\n      message:\n        exception instanceof Error ? exception.message : String(exception),\n      timestamp: new Date().toISOString(),\n      stack: exception instanceof Error ? exception.stack : undefined,\n      originalError: serializableError,\n      // Include the raw error for easier debugging\n      rawError: String(exception),\n    };\n\n    this.logger.debug(\n      `Returning new RemoteMicroserviceError with payload: ${JSON.stringify(\n        errorPayload\n      )}`\n    );\n    return throwError(\n      () =>\n        new RemoteMicroserviceError(this.serviceName, \"unknown\", errorPayload)\n    );\n  }\n}\n"]}