{"version":3,"file":"message-pattern.decorator.js","sourceRoot":"","sources":["message-pattern.decorator.ts"],"names":[],"mappings":";;AASA,wCAyCC;AAlDD,4BAA0B;AAC1B,yDAA6E;AAE7E;;;;;GAKG;AACH,SAAgB,cAAc;IAC5B,OAAO,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,EAAE;QACzC,MAAM,IAAI,GAAG,MAAM,CAAC,WAAuB,CAAC;QAC5C,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC;QAEjC,OAAO,CAAC,GAAG,CACT,0CAA0C,cAAc,IAAI,MAAM,CAChE,WAAW,CACZ,EAAE,CACJ,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5E,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,OAAO,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;QAE5E,4CAA4C;QAC5C,IAAI,WAA+B,CAAC;QAEpC,uBAAuB;QACvB,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QACtD,OAAO,CAAC,GAAG,CAAC,yCAAyC,EAAE,WAAW,CAAC,CAAC;QAEpE,mCAAmC;QACnC,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YACxD,OAAO,CAAC,GAAG,CAAC,uCAAuC,EAAE,WAAW,CAAC,CAAC;QACpE,CAAC;QAED,2CAA2C;QAC3C,MAAM,oBAAoB,GAAG,WAAW,IAAI,OAAO,CAAC;QAEpD,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO,CAAC,IAAI,CACV,YAAY,cAAc,uEAAuE,CAClG,CAAC;QACJ,CAAC;QAED,MAAM,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;QACnC,MAAM,OAAO,GAAG,GAAG,oBAAoB,IAAI,cAAc,IAAI,MAAM,EAAE,CAAC;QACtE,OAAO,CAAC,GAAG,CAAC,kCAAkC,OAAO,EAAE,CAAC,CAAC;QAEzD,IAAA,8BAAkB,EAAC,OAAO,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;IAC/D,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import \"reflect-metadata\";\nimport { MessagePattern as NestMessagePattern } from \"@nestjs/microservices\";\n\n/**\n * Replacement for Nest's @MessagePattern().\n * Auto-assembles the subject as \"<service>.<ControllerClass>.<methodName>\".\n *\n * Requires class to be decorated with @MicroserviceController(serviceName).\n */\nexport function MessagePattern(): MethodDecorator {\n  return (target, propertyKey, descriptor) => {\n    const ctor = target.constructor as Function;\n    const controllerName = ctor.name;\n\n    console.log(\n      `MessagePattern decorator executing for ${controllerName}.${String(\n        propertyKey\n      )}`\n    );\n    console.log(`Metadata keys on constructor:`, Reflect.getMetadataKeys(ctor));\n    console.log(`Metadata keys on prototype:`, Reflect.getMetadataKeys(target));\n\n    // Try to get the service name from metadata\n    let serviceName: string | undefined;\n\n    // Check on constructor\n    serviceName = Reflect.getMetadata(\"ms:service\", ctor);\n    console.log(`Service name from constructor metadata:`, serviceName);\n\n    // If not found, check on prototype\n    if (!serviceName) {\n      serviceName = Reflect.getMetadata(\"ms:service\", target);\n      console.log(`Service name from prototype metadata:`, serviceName);\n    }\n\n    // Use a fallback service name if not found\n    const effectiveServiceName = serviceName || \"world\";\n\n    if (!serviceName) {\n      console.warn(\n        `WARNING: ${controllerName} missing @MicroserviceController(serviceName), using fallback \"world\"`\n      );\n    }\n\n    const action = String(propertyKey);\n    const subject = `${effectiveServiceName}.${controllerName}.${action}`;\n    console.log(`Using message pattern subject: ${subject}`);\n\n    NestMessagePattern(subject)(target, propertyKey, descriptor);\n  };\n}\n"]}