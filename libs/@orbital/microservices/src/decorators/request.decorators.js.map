{"version":3,"file":"request.decorators.js","sourceRoot":"","sources":["request.decorators.ts"],"names":[],"mappings":";;AAUA,kDAiBC;AAMD,sEAiBC;AAMD,wEAiBC;AAMD,0EAoBC;AA7FD;;;GAGG;AACH,SAAgB,mBAAmB,CAAU,OAAe;IAC1D,OAAO,UACL,MAAoB,EACpB,WAAmB,EACnB,UAA8B;QAE9B,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC;QACxC,UAAU,CAAC,KAAK,GAAG,KAAK,WAAW,GAAG,IAAkB;YACtD,MAAM,SAAS,GAAI,IAAqB,CAAC,OAG1B,CAAC;YAChB,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;YAC9D,OAAO,MAAM,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC5D,CAAC,CAAC;QACF,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,SAAgB,6BAA6B,CAAC,OAAe;IAC3D,OAAO,UACL,MAAoB,EACpB,WAAmB,EACnB,UAA8B;QAE9B,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC;QACxC,UAAU,CAAC,KAAK,GAAG,KAAK,WAAW,GAAG,IAAkB;YACtD,MAAM,QAAQ,GAAG,MAAO,IAAqB,CAAC,iBAAiB,CAAC,IAAI,CAClE,IAAI,EACJ,OAAO,EACP,IAAI,CAAC,CAAC,CAAC,CACR,CAAC;YACF,OAAO,MAAM,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC;QACF,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,SAAgB,8BAA8B,CAAC,OAAe;IAC5D,OAAO,UACL,MAAoB,EACpB,WAAmB,EACnB,UAA8B;QAE9B,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC;QACxC,UAAU,CAAC,KAAK,GAAG,KAAK,WAAW,GAAG,IAAkB;YACtD,MAAM,QAAQ,GAAG,MAAO,IAAqB,CAAC,kBAAkB,CAAC,IAAI,CACnE,IAAI,EACJ,OAAO,EACP,IAAI,CAAC,CAAC,CAAC,CACR,CAAC;YACF,OAAO,MAAM,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC;QACF,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,SAAgB,+BAA+B,CAG7C,OAAe;IACf,OAAO,UACL,MAAoB,EACpB,WAAmB,EACnB,UAA8B;QAE9B,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC;QACxC,UAAU,CAAC,KAAK,GAAG,KAAK,WAAW,GAAG,IAAkB;YACtD,MAAM,SAAS,GAAI,IAAqB,CAAC,mBAGD,CAAC;YACzC,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,OAAO,MAAM,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC;QACF,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { BulkItemizedResponse } from \"@orbital/bulk-operations\";\nimport { Microservice } from \"../microservice\";\n\n// Helper type to infer parameter types\ntype MethodParams = any[];\n\n/**\n * Decorator for basic microservice request.\n * Appends RPC response as last argument to original method.\n */\nexport function MicroserviceRequest<T = any>(message: string) {\n  return function (\n    target: Microservice,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value;\n    descriptor.value = async function (...args: MethodParams) {\n      const requestFn = (this as Microservice).request as <R>(\n        msg: string,\n        ...params: any[]\n      ) => Promise<R>;\n      const response = await requestFn.call(this, message, ...args);\n      return await originalMethod.call(this, ...args, response);\n    };\n    return descriptor;\n  };\n}\n\n/**\n * Decorator for status bulk request.\n * Appends BulkResponse as last argument to original method.\n */\nexport function MicroserviceStatusBulkRequest(message: string) {\n  return function (\n    target: Microservice,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value;\n    descriptor.value = async function (...args: MethodParams) {\n      const response = await (this as Microservice).statusBulkRequest.call(\n        this,\n        message,\n        args[0]\n      );\n      return await originalMethod.apply(this, [...args, response]);\n    };\n    return descriptor;\n  };\n}\n\n/**\n * Decorator for counted bulk request.\n * Appends BulkCountedResponse as last argument to original method.\n */\nexport function MicroserviceCountedBulkRequest(message: string) {\n  return function (\n    target: Microservice,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value;\n    descriptor.value = async function (...args: MethodParams) {\n      const response = await (this as Microservice).countedBulkRequest.call(\n        this,\n        message,\n        args[0]\n      );\n      return await originalMethod.apply(this, [...args, response]);\n    };\n    return descriptor;\n  };\n}\n\n/**\n * Decorator for itemized bulk request.\n * Appends BulkItemizedResponse<DataItemType, ResultItemDataType> as last argument.\n */\nexport function MicroserviceItemizedBulkRequest<\n  DataItemType = any,\n  ResultItemDataType = any,\n>(message: string) {\n  return function (\n    target: Microservice,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value;\n    descriptor.value = async function (...args: MethodParams) {\n      const requestFn = (this as Microservice).itemizedBulkRequest as <D, R>(\n        msg: string,\n        ...params: any[]\n      ) => Promise<BulkItemizedResponse<D, R>>;\n      const response = await requestFn.call(this, message, args[0]);\n      return await originalMethod.apply(this, [...args, response]);\n    };\n    return descriptor;\n  };\n}\n"]}