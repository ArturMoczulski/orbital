{"version":3,"file":"errors.js","sourceRoot":"","sources":["errors.ts"],"names":[],"mappings":";;;AAAA,yDAAqD;AAErD;;GAEG;AACH,MAAa,kBAAmB,SAAQ,4BAAY;IAClD,YAAY,OAAe,EAAE,OAAa;QACxC,KAAK,CAAC;YACJ,IAAI,EAAE,sBAAsB;YAC5B,OAAO;YACP,OAAO;SACR,CAAC,CAAC;IACL,CAAC;CACF;AARD,gDAQC;AAED;;GAEG;AACH,MAAa,mBAAoB,SAAQ,kBAAkB;IACzD,YAAY,gBAAuB;QACjC,KAAK,CAAC,kCAAkC,EAAE,EAAE,gBAAgB,EAAE,CAAC,CAAC;QAC/D,IAAY,CAAC,KAAK,GAAG,EAAE,gBAAgB,EAAE,CAAC;IAC7C,CAAC;CACF;AALD,kDAKC;AAED;;;GAGG;AACH,MAAa,uBAAwB,SAAQ,kBAAkB;IAC7D,YACE,SAAiB,EACjB,MAAc,EACd,WAAkD;QAElD,KAAK,CAAC,oCAAoC,EAAE;YAC1C,SAAS;YACT,MAAM;YACN,WAAW;SACZ,CAAC,CAAC;QACF,IAAY,CAAC,KAAK,GAAG,EAAE,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC;IAC3D,CAAC;CACF;AAbD,0DAaC;AAED;;GAEG;AACH,MAAa,sBAAuB,SAAQ,kBAAkB;IAC5D,YAAY,KAAa,EAAE,MAAc;QACvC,KAAK,CAAC,2CAA2C,KAAK,QAAQ,EAAE;YAC9D,KAAK;YACL,MAAM;SACP,CAAC,CAAC;QACF,IAAY,CAAC,KAAK,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;IAC1C,CAAC;CACF;AARD,wDAQC;AAED;;GAEG;AACH,MAAa,gBAAiB,SAAQ,kBAAkB;IACtD,YAAY,SAAiB;QAC3B,KAAK,CAAC,kCAAkC,SAAS,IAAI,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;QACrE,IAAY,CAAC,KAAK,GAAG,EAAE,SAAS,EAAE,CAAC;IACtC,CAAC;CACF;AALD,4CAKC","sourcesContent":["import { RpcException } from \"@nestjs/microservices\";\n\n/**\n * Base class for all bulk operation errors\n */\nexport class BulkOperationError extends RpcException {\n  constructor(message: string, details?: any) {\n    super({\n      code: \"BULK_OPERATION_ERROR\",\n      message,\n      details,\n    });\n  }\n}\n\n/**\n * Thrown when a bulk operation fails due to validation errors\n */\nexport class BulkValidationError extends BulkOperationError {\n  constructor(validationErrors: any[]) {\n    super(\"Bulk operation validation failed\", { validationErrors });\n    (this as any).cause = { validationErrors };\n  }\n}\n\n/**\n * Thrown when a bulk operation partially succeeds\n * (some items processed successfully, others failed)\n */\nexport class BulkPartialSuccessError extends BulkOperationError {\n  constructor(\n    succeeded: number,\n    failed: number,\n    failedItems?: Array<{ id: string; error: string }>\n  ) {\n    super(\"Bulk operation partially succeeded\", {\n      succeeded,\n      failed,\n      failedItems,\n    });\n    (this as any).cause = { succeeded, failed, failedItems };\n  }\n}\n\n/**\n * Thrown when a bulk operation exceeds the maximum allowed items\n */\nexport class BulkLimitExceededError extends BulkOperationError {\n  constructor(limit: number, actual: number) {\n    super(`Bulk operation exceeds maximum limit of ${limit} items`, {\n      limit,\n      actual,\n    });\n    (this as any).cause = { limit, actual };\n  }\n}\n\n/**\n * Thrown when a bulk operation times out\n */\nexport class BulkTimeoutError extends BulkOperationError {\n  constructor(timeoutMs: number) {\n    super(`Bulk operation timed out after ${timeoutMs}ms`, { timeoutMs });\n    (this as any).cause = { timeoutMs };\n  }\n}\n"]}