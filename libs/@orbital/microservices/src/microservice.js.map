{"version":3,"file":"microservice.js","sourceRoot":"","sources":["microservice.ts"],"names":[],"mappings":"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","sourcesContent":["import { ClientProxy, RpcException } from \"@nestjs/microservices\";\nimport type { BulkOperationResponseDTO } from \"@orbital/bulk-operations\";\nimport {\n  BulkCountedResponse,\n  BulkItemizedResponse,\n  BulkOperationError,\n  BulkResponse,\n} from \"@orbital/bulk-operations\";\nimport {\n  catchError,\n  defaultIfEmpty,\n  lastValueFrom,\n  Observable,\n  OperatorFunction,\n  throwError,\n  timeout,\n  TimeoutError,\n} from \"rxjs\";\nimport { MicroserviceManagerEvents } from \"./manager/microservice-manager.service\";\n\nexport class MicroserviceUnavailable extends RpcException {\n  constructor(public microservice: string) {\n    super({\n      code: \"MICROSERVICE_UNAVAILABLE\",\n      message: `Microservice '${microservice}' is unavailable`,\n    });\n  }\n}\n\nexport class UnrecognizedMicroserviceMessagePattern extends RpcException {\n  constructor(\n    public microservice: string,\n    public messagePattern: string,\n    public args: any\n  ) {\n    super({\n      code: \"UNRECOGNIZED_MICROSERVICE_MESSAGE_PATTERN\",\n      message: `Microservice '${microservice}' does not recognize message pattern '${messagePattern}'`,\n    });\n  }\n}\n\nexport abstract class Microservice {\n  static RPC_TIMEOUT = 15 * 1000;\n  private readonly isDebugMode: boolean;\n\n  constructor(\n    protected readonly clientProxy: ClientProxy,\n    public readonly microservice?: string\n  ) {\n    this.isDebugMode = process.execArgv.some((arg) =>\n      arg.startsWith(\"--inspect\")\n    );\n  }\n\n  private rpcPipeline<T>(\n    message: string,\n    msTimeout: number\n  ): OperatorFunction<T, T | null>[] {\n    const ops: OperatorFunction<T, T | null>[] = [];\n    if (!this.isDebugMode) {\n      ops.push(timeout(msTimeout));\n    }\n    ops.push(defaultIfEmpty(null));\n    ops.push(\n      catchError((err) => {\n        if (err instanceof TimeoutError) {\n          return throwError(\n            () =>\n              new RpcException({\n                code: \"MICROSERVICE_TIMEOUT\",\n                message: `RPC '${message}' timed out after ${msTimeout}ms: ${\n                  err.message || err\n                }`,\n              })\n          );\n        }\n        return throwError(() => err);\n      })\n    );\n    return ops;\n  }\n\n  /**\n   * Sends a request to the microservice and returns the response.\n   * @param message The message pattern to send to the microservice.\n   * @param params The data to send with the message.\n   */\n  async request<T>(\n    message: string,\n    params?: any,\n    msTimeout = Microservice.RPC_TIMEOUT\n  ): Promise<T | null> {\n    const isHealthCheckCall = message.endsWith(\"-health-check\");\n    let piped$: Observable<T | null> = this.clientProxy.send<T>(\n      message,\n      params ?? {}\n    );\n    for (const op of this.rpcPipeline<T>(message, msTimeout)) {\n      // @ts-ignore TS2345: mismatched OperatorFunction types\n      piped$ = piped$.pipe(op);\n    }\n    try {\n      return await lastValueFrom(piped$);\n    } catch (err) {\n      const errorPayload =\n        err instanceof RpcException && typeof err.getError === \"function\"\n          ? (err.getError() as any)\n          : null;\n      if (errorPayload?.code === \"MICROSERVICE_TIMEOUT\") {\n        this.clientProxy.emit(MicroserviceManagerEvents.Unavailable, {\n          microservice: this.microservice!,\n        });\n        throw new MicroserviceUnavailable(this.microservice!);\n      }\n      const errMsg =\n        err instanceof RpcException && typeof err.getError === \"function\"\n          ? (() => {\n              const e = err.getError();\n              return typeof e === \"string\" ? e : (e as any).message;\n            })()\n          : (err as any).message || String(err);\n\n      if (\n        !isHealthCheckCall &&\n        errMsg.includes(\"There are no subscribers listening to that message\")\n      ) {\n        let healthy: boolean;\n        try {\n          const healthRes = await this.request<string>(\n            `${this.microservice}-health-check`,\n            undefined,\n            msTimeout\n          );\n          healthy = healthRes === \"ok\";\n        } catch {\n          healthy = false;\n        }\n        if (healthy) {\n          throw new UnrecognizedMicroserviceMessagePattern(\n            this.microservice!,\n            message,\n            params\n          );\n        } else {\n          this.clientProxy.emit(MicroserviceManagerEvents.Unavailable, {\n            microservice: this.microservice!,\n          });\n          throw new MicroserviceUnavailable(this.microservice!);\n        }\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Sends a request to the microservice and wraps the result in a BulkResponse.\n   */\n  async statusBulkRequest(message: string, params: any): Promise<BulkResponse> {\n    try {\n      const result = await this.request<BulkResponse>(message, params);\n      return BulkResponse.fromJson(result);\n    } catch (error) {\n      throw new BulkOperationError(error);\n    }\n  }\n\n  /**\n   * Sends a request to the microservice and wraps the result in a BulkCountedResponse.\n   */\n  async countedBulkRequest(\n    message: string,\n    params: any\n  ): Promise<BulkCountedResponse> {\n    try {\n      const result = await this.request<BulkCountedResponse>(message, params);\n      return BulkCountedResponse.fromJson(result);\n    } catch (error) {\n      throw new BulkOperationError(error);\n    }\n  }\n\n  /**\n   * Sends a request to the microservice and wraps the result in a BulkItemizedResponse.\n   */\n  async itemizedBulkRequest<DataItemType = any, ResultItemDataType = any>(\n    message: string,\n    params: any\n  ): Promise<BulkItemizedResponse<DataItemType, ResultItemDataType>> {\n    try {\n      const result = await this.request<\n        BulkItemizedResponse<DataItemType, ResultItemDataType>\n      >(message, params);\n      return BulkItemizedResponse.fromJson(result as BulkOperationResponseDTO);\n    } catch (error) {\n      throw new BulkOperationError(error);\n    }\n  }\n}\n"]}