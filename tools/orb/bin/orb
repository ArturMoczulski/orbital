#!/usr/bin/env node
import { program } from "commander";
import inquirer from "inquirer";
import { execSync } from "child_process";
import fs from "fs";
import path from "path";
import figlet from "figlet";
import { fileURLToPath } from "url";

const __dirname = path.dirname(fileURLToPath(import.meta.url));
console.log(figlet.textSync("orb"));

// Default to interactive "manage" if no command provided
if (process.argv.length <= 2) {
  process.argv.push("manage");
}

function run(cmd, opts = {}) {
  execSync(cmd, { stdio: "inherit", ...opts });
}

program.version(
  JSON.parse(
    fs.readFileSync(path.join(__dirname, "../../../package.json"), "utf8")
  ).version
);

// Monorepo commands
const monorepoCmd = program
  .command("monorepo")
  .description("Manage monorepo commands");

monorepoCmd
  .command("install")
  .description("Install the monorepo-template remote")
  .action(() => {
    const remote = "monorepo-template";
    const url = "git@github.com:ArturMoczulski/orbital-monorepo-template.git";
    // ensure no duplicate remote
    try {
      run(`git remote remove ${remote}`, { stdio: "ignore" });
    } catch {}
    // add remote fresh
    run(`git remote add ${remote} ${url}`);
    console.log(`Added ${remote} remote pointing to ${url}`);
  });

monorepoCmd
  .command("update")
  .description("Update from monorepo-template remote")
  .action(() => {
    const remote = "monorepo-template";
    const url = "git@github.com:ArturMoczulski/orbital-monorepo-template.git";
    // ensure remote exists without printing errors if missing
    try {
      run(`git remote get-url ${remote}`, { stdio: "ignore" });
    } catch {
      run(`git remote add ${remote} ${url}`);
    }
    run(`git fetch ${remote} main`);
    run(`git merge ${remote}/main`);
    console.log("Monorepo updated from monorepo-template/main");
  });

monorepoCmd
  .command("test")
  .description("Run monorepo-template integration tests")
  .action(() => {
    run("jest --config jest.config.cjs");
  });

// Create project from template
program
  .command("create <category> <template> <name>")
  .description("Create a new project from a template")
  .action((category, template, name) => {
    const bases = { library: "libs", service: "services", client: "clients" };
    const destBase = bases[category];
    if (!destBase) {
      console.error(`Invalid category: ${category}`);
      process.exit(1);
    }
    const templateDir = path.join(__dirname, "../../templates", template);
    if (!fs.existsSync(templateDir)) {
      console.error(`Template not found: ${template}`);
      process.exit(1);
    }
    const parts = name.match(/^@([^/]+)\/(.+)$/);
    const destDir = parts
      ? path.join(destBase, parts[1], parts[2])
      : path.join(destBase, name);
    if (fs.existsSync(destDir)) {
      console.error(`Project directory exists: ${destDir}`);
      process.exit(1);
    }
    fs.mkdirSync(destDir, { recursive: true });
    fs.cpSync(templateDir, destDir, { recursive: true });
    const pkgFile = path.join(destDir, "package.json");
    const pkg = JSON.parse(fs.readFileSync(pkgFile, "utf8"));
    pkg.name = name;
    fs.writeFileSync(pkgFile, JSON.stringify(pkg, null, 2));
    console.log(`Created project ${name} in ${destDir}`);
  });

// Interactive CLI
program
  .command("manage")
  .description("Launch interactive CLI")
  .action(async () => {
    while (true) {
      // Build main menu choices dynamically
      const baseDirs = ["libs", "services", "clients"];
      let hasProjects = false;
      for (const dir of baseDirs) {
        const dirPath = path.join(__dirname, "../../", dir);
        if (!fs.existsSync(dirPath)) continue;
        for (const entry of fs.readdirSync(dirPath)) {
          const projPath = path.join(dirPath, entry);
          if (
            fs.statSync(projPath).isDirectory() &&
            fs.existsSync(path.join(projPath, "package.json"))
          ) {
            hasProjects = true;
            break;
          }
        }
        if (hasProjects) break;
      }
      const mainChoices = ["Create project"];
      if (hasProjects) mainChoices.push("Manage projects");
      mainChoices.push("Manage monorepo", "Exit");
      const { choice } = await inquirer.prompt({
        type: "list",
        name: "choice",
        message: "Select an option:",
        choices: mainChoices,
      });

      if (choice === "Create project") {
        const answers = await inquirer.prompt([
          {
            type: "list",
            name: "category",
            message: "Select category:",
            choices: ["library", "service", "client"],
          },
          {
            type: "list",
            name: "template",
            message: "Select template:",
            choices: fs
              .readdirSync(path.join(__dirname, "../../templates"))
              .filter((d) =>
                fs
                  .statSync(path.join(__dirname, "../../templates", d))
                  .isDirectory()
              ),
          },
          { type: "input", name: "name", message: "Enter project name:" },
        ]);
        await program.parseAsync([
          "node",
          "bin/tools/orb",
          "create",
          answers.category,
          answers.template,
          answers.name,
        ]);
      } else if (choice === "Manage projects") {
        // List all projects under libs, services, clients by package.json name
        const baseDirs = ["libs", "services", "clients"];
        const projects = [];
        for (const dir of baseDirs) {
          const dirPath = path.join(__dirname, "../../", dir);
          if (!fs.existsSync(dirPath)) continue;
          for (const entry of fs.readdirSync(dirPath)) {
            const projPath = path.join(dirPath, entry);
            if (fs.statSync(projPath).isDirectory()) {
              const pkgPath = path.join(projPath, "package.json");
              if (fs.existsSync(pkgPath)) {
                const { name: pkgName } = JSON.parse(
                  fs.readFileSync(pkgPath, "utf8")
                );
                projects.push({ name: pkgName, path: projPath });
              }
            }
          }
        }
        const choices = projects
          .map((p) => p.name)
          .concat(new inquirer.Separator(), "Go back");
        const { projectName } = await inquirer.prompt({
          type: "list",
          name: "projectName",
          message: "Select project:",
          choices,
        });
        if (projectName === "Go back") continue;
        const project = projects.find((p) => p.name === projectName);
        const envPath = path.join(project.path, ".env.template");
        if (!fs.existsSync(envPath)) fs.writeFileSync(envPath, "");
        const envContent = fs.readFileSync(envPath, "utf8").split(/\r?\n/);
        const { key, value } = await inquirer.prompt([
          {
            type: "input",
            name: "key",
            message: "Enter environment variable name:",
          },
          { type: "input", name: "value", message: "Enter value:" },
        ]);
        const idx = envContent.findIndex((line) => line.startsWith(`${key}=`));
        if (idx >= 0) envContent[idx] = `${key}=${value}`;
        else envContent.push(`${key}=${value}`);
        fs.writeFileSync(envPath, envContent.join("\n"));
        console.log(`Updated ${key} in ${envPath}`);
      } else if (choice === "Manage monorepo") {
        const { action } = await inquirer.prompt({
          type: "list",
          name: "action",
          message: "Select action:",
          choices: [
            "Install template remote",
            "Update from template",
            "Run monorepo tests",
            "Go back",
          ],
        });
        if (action === "Install template remote")
          run("node bin/tools/orb monorepo install");
        else if (action === "Update from template")
          run("node bin/tools/orb monorepo update");
        else if (action === "Run monorepo tests")
          run("node bin/tools/orb monorepo test");
        else if (action === "Go back") continue;
      } else {
        process.exit(0);
      }
    }
  });

program.parse(process.argv);
