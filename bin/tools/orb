#!/usr/bin/env bash
set -e

# Print ASCII art and version
version=$(jq -r .version package.json)
cat << 'EOF'
  ____   ____  ____
 / __ \ / __ \| __ \
| |  | | |  | |  _ \
| |  | | |  | | |_) |
| |__| | |__| |____/
 \____/ \____/|_____/
EOF
echo -e "\e[32mVersion: $version\e[0m"


# Support non-interactive invocation: yarn orb generate <library|service|client> <project-name>
if [ "$1" = "generate" ] && [ $# -eq 3 ]; then
  type="$2"
  project="$3"
  case "$type" in
    library)
      template_dir="libs/orbital/template"
      dest_base="libs/orbital"
      ;;
    service)
      template_dir="services/orbital/template"
      dest_base="services/orbital"
      ;;
    client)
      template_dir="clients/orbital/template"
      dest_base="clients/orbital"
      ;;
    *)
      echo "Usage: orb generate [library|service|client] <project-name>"
      exit 1
      ;;
  esac
  dest_dir="$dest_base/$project"
  if [[ -d "$dest_dir" ]]; then
    echo "Directory $dest_dir already exists!"
    exit 1
  fi
  mkdir -p "$dest_dir"
  rsync -av --exclude-from="$template_dir/.gitignore" "$template_dir"/ "$dest_dir"/
  (cd "$dest_dir" && jq ".name = \"@orbital/$project\"" package.json > package.tmp.json && mv package.tmp.json package.json)
  echo "Generated $type $project in $dest_dir."
  exit 0
fi

echo "Interactive Orbital CLI"
PS3="Select an option: "
options=("Generate from template" "Exit")
select opt in "${options[@]}"; do
  case $opt in
    "Generate from template")
      PS3="Select type to generate: "
      types=("library" "service" "client")
      select type in "${types[@]}"; do
        if [[ " ${types[*]} " == *" $type "* ]]; then
          read -p "Enter new project name (kebab-case): " project
          # Determine template and destination directories
          case $type in
            "library")
              template_dir="libs/orbital/template"
              dest_base="libs/orbital"
              ;;
            "service")
              template_dir="services/orbital/template"
              dest_base="services/orbital"
              ;;
            "client")
              template_dir="clients/orbital/template"
              dest_base="clients/orbital"
              ;;
          esac
          dest_dir="$dest_base/$project"
          if [[ -d "$dest_dir" ]]; then
            echo "Directory $dest_dir already exists!"
            exit 1
          fi
          mkdir -p "$dest_dir"
          # Ensure template directory exists
          if [ ! -d "$template_dir" ]; then
            echo "Template directory not found: $template_dir"
            exit 1
          fi
          # Prepare rsync exclude option if .gitignore exists
          exclude_opt=""
          if [ -f "$template_dir/.gitignore" ]; then
            exclude_opt="--exclude-from=$template_dir/.gitignore"
          fi
          rsync -av $exclude_opt "$template_dir"/ "$dest_dir"/
          # Update package.json name
          (cd "$dest_dir" && jq ".name = \"@orbital/$project\"" package.json > package.tmp.json && mv package.tmp.json package.json)
          echo "Generated $type $project in $dest_dir."
          break
        else
          echo "Invalid selection."
        fi
      done
      break
      ;;
    "Exit")
      echo "Goodbye!"
      break
      ;;
    *)
      echo "Invalid option."
      ;;
  esac
done