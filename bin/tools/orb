#!/usr/bin/env node
import { program } from "commander";
import inquirer from "inquirer";
import { execSync } from "child_process";
import fs from "fs";
import path from "path";
import figlet from "figlet";
import { fileURLToPath } from "url";

const __dirname = path.dirname(fileURLToPath(import.meta.url));
console.log(figlet.textSync("orb"));

// Default to interactive "manage" if no command provided
if (process.argv.length <= 2) {
  process.argv.push("manage");
}
function run(cmd, opts = {}) {
  execSync(cmd, { stdio: "inherit", ...opts });
}

program.version(
  JSON.parse(
    fs.readFileSync(path.join(__dirname, "../../package.json"), "utf8")
  ).version
);

// Monorepo commands
const monorepoCmd = program
  .command("monorepo")
  .description("Manage monorepo commands");

monorepoCmd
  .command("install")
  .description("Install the monorepo-template remote")
  .action(() => {
    const remote = "monorepo-template";
    const url = "git@github.com:ArturMoczulski/orbital-monorepo-template.git";
    try {
      run(`git remote add ${remote} ${url}`);
      console.log(`Added ${remote} remote pointing to ${url}`);
    } catch {
      run(`git remote set-url ${remote} ${url}`);
      console.log(`Updated ${remote} remote to ${url}`);
    }
  });

monorepoCmd
  .command("update")
  .description("Update from monorepo-template remote")
  .action(() => {
    run("git fetch monorepo-template main");
    run("git merge monorepo-template/main");
    console.log("Monorepo updated from monorepo-template/main");
  });

monorepoCmd
  .command("test")
  .description("Run monorepo-template integration tests")
  .action(() => {
    run("jest --config jest.config.cjs");
  });

// Create project from template
program
  .command("create <category> <template> <name>")
  .description("Create a new project from a template")
  .action((category, template, name) => {
    const bases = { library: "libs", service: "services", client: "clients" };
    const destBase = bases[category];
    if (!destBase) {
      console.error(`Invalid category: ${category}`);
      process.exit(1);
    }
    const templateDir = path.join(__dirname, "../../templates", template);
    if (!fs.existsSync(templateDir)) {
      console.error(`Template not found: ${template}`);
      process.exit(1);
    }
    const parts = name.match(/^@([^/]+)\/(.+)$/);
    const destDir = parts
      ? path.join(destBase, parts[1], parts[2])
      : path.join(destBase, name);
    if (fs.existsSync(destDir)) {
      console.error(`Project directory exists: ${destDir}`);
      process.exit(1);
    }
    fs.mkdirSync(destDir, { recursive: true });
    fs.cpSync(templateDir, destDir, { recursive: true });
    const pkgFile = path.join(destDir, "package.json");
    const pkg = JSON.parse(fs.readFileSync(pkgFile, "utf8"));
    pkg.name = name;
    fs.writeFileSync(pkgFile, JSON.stringify(pkg, null, 2));
    console.log(`Created project ${name} in ${destDir}`);
  });

// Interactive CLI
program
  .command("manage")
  .description("Launch interactive CLI")
  .action(async () => {
    const { choice } = await inquirer.prompt({
      type: "list",
      name: "choice",
      message: "Select an option:",
      choices: ["Create project", "Manage projects", "Manage monorepo", "Exit"],
    });
    if (choice === "Create project") {
      const answers = await inquirer.prompt([
        {
          type: "list",
          name: "category",
          message: "Select category:",
          choices: ["library", "service", "client"],
        },
        {
          type: "list",
          name: "template",
          message: "Select template:",
          choices: fs
            .readdirSync(path.join(__dirname, "../../templates"))
            .filter((d) =>
              fs
                .statSync(path.join(__dirname, "../../templates", d))
                .isDirectory()
            ),
        },
        { type: "input", name: "name", message: "Enter project name:" },
      ]);
      await program.parseAsync([
        "node",
        "bin/tools/orb",
        "create",
        answers.category,
        answers.template,
        answers.name,
      ]);
    } else if (choice === "Manage projects") {
      console.log("Manage projects not yet implemented");
    } else if (choice === "Manage monorepo") {
      const { action } = await inquirer.prompt({
        type: "list",
        name: "action",
        message: "Select action:",
        choices: [
          "Install template remote",
          "Update from template",
          "Run monorepo tests",
        ],
      });
      if (action === "Install template remote")
        run("node bin/tools/orb monorepo install");
      else if (action === "Update from template")
        run("node bin/tools/orb monorepo update");
      else if (action === "Run monorepo tests")
        run("node bin/tools/orb monorepo test");
    } else {
      process.exit(0);
    }
  });

program.parse(process.argv);
