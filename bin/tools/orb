#!/usr/bin/env bash
set -e

# Print ASCII art and version
version=$(jq -r .version package.json)
cat << 'EOF'
  ____   ____  ____
 / __ \ / __ \| __ \
| |  | | |  | |  _ \
| |  | | |  | | |_) |
| |__| | |__| |____/
 \____/ \____/|_____/
EOF
printf "\033[32mVersion: %s\033[0m\n\n" "$version"

# Create project from template
create_project() {
  local category template package_name dest_base template_dir dest_dir owner pkg initial_pkg test_dir
  # Category and template selection from args or interactive
  if [ -n "$1" ] && [ -n "$2" ]; then
    category="$1"; template="$2"; initial_pkg="$3"
  else
    PS3="Select category: "
    categories=("library" "service" "client")
    select category in "${categories[@]}"; do
      [[ " ${categories[*]} " == *" $category "* ]] && break
      echo "Invalid selection."
    done

    # List available templates
    templates=()
    for d in templates/*; do
      [ -d "$d" ] && templates+=("$(basename "$d")")
    done
    PS3="Select template to use: "
    select template in "${templates[@]}"; do
      [[ " ${templates[*]} " == *" $template "* ]] && break
      echo "Invalid selection."
    done

  fi

  case "$category" in
    library)  dest_base="libs";    ;;
    service)  dest_base="services";;
    client)   dest_base="clients";  ;;
    *) echo "Invalid category: $category"; exit 1 ;;
  esac

  # Prompt for project name until an unused path is provided
  while true; do
    if [ -n "$initial_pkg" ]; then
      package_name="$initial_pkg"; initial_pkg=""
    else
      read -p "Enter project name (scoped @owner/name or unscoped): " package_name
    fi
    if [[ "$package_name" =~ ^@([^/]+)/(.+)$ ]]; then
      owner="${BASH_REMATCH[1]}"; pkg="${BASH_REMATCH[2]}"
      test_dir="$dest_base/$owner/$pkg"
    else
      pkg="$package_name"; test_dir="$dest_base/$pkg"
    fi

    if [ -d "$test_dir" ]; then
      echo "Project name taken: $package_name (path $test_dir exists). Please choose another."
    else
      dest_dir="$test_dir"
      break
    fi
  done

  template_dir="templates/$template"
  [ -d "$template_dir" ] || { echo "Template not found: $template_dir"; exit 1; }


  if [ -d "$dest_dir" ]; then
    echo "Project directory exists: $dest_dir"; exit 1
  fi

  mkdir -p "$dest_dir"
  exclude_opt=""
  [ -f "$template_dir/.gitignore" ] && exclude_opt="--exclude-from=$template_dir/.gitignore"
  rsync -av $exclude_opt "$template_dir"/ "$dest_dir"/

  # Update package.json name
  (cd "$dest_dir" && jq ".name = \"$package_name\"" package.json > tmp.$$.json && mv tmp.$$.json package.json)

  echo "Created project $package_name in $dest_dir"
  exit 0
}

# Add or update environment variables in .env.template
manage_env_vars() {
  local project_dir="$1" pkg="$2" varname value slug prefix env_file
  read -p "Enter environment variable name: " varname
  read -p "Enter default value: " value
  slug="${pkg//@/}"; slug="${slug//\//_}"
  prefix=$(printf "%s_%s" "$slug" "$varname" | tr '[:lower:]' '[:upper:]')
  env_file="$project_dir/.env.template"
  touch "$env_file"
  sed -i.bak "\|^${prefix}=|d" "$env_file" && rm "${env_file}.bak"
  echo "${prefix}=${value}" >> "$env_file"
  echo "Added ${prefix} to ${env_file}"
  exit 0
}

# Manage projects menu
manage_projects() {
  local dirs=() names=() pkg project_dir action
  for base in libs/orbital services/orbital clients/orbital; do
    for d in "$base"/*; do
      [ -f "$d/package.json" ] || continue
      [ "$(basename "$d")" != "template" ] || continue
      pkg=$(jq -r .name "$d/package.json")
      dirs+=("$d"); names+=("$pkg")
    done
  done

  [ "${#names[@]}" -gt 0 ] || { echo "No projects found."; exit 1; }

  PS3="Select project: "
  select pkg in "${names[@]}"; do
    [ -n "$pkg" ] && project_dir="${dirs[$((REPLY-1))]}" && break
    echo "Invalid selection."
  done

  PS3="Select action: "
  actions=("Manage environment variables" "Go back")
  select action in "${actions[@]}"; do
    case "$action" in
      "Manage environment variables") manage_env_vars "$project_dir" "$pkg" ;;
      "Go back") return ;;
      *) echo "Invalid selection." ;;
    esac
  done
}

# Support non-interactive create/generate: orb create|generate <category> <template> <package_name>
if { [ "$1" = "create" ] || [ "$1" = "generate" ]; } && [ $# -eq 4 ]; then
  create_project "$2" "$3" "$4"
fi

# Interactive CLI
echo "Interactive Orbital CLI"
PS3="Select an option: "
options=("Create project" "Manage projects" "Exit")
select opt in "${options[@]}"; do
  case "$opt" in
    "Create project")   create_project ;;
    "Manage projects")  manage_projects ;;
    "Exit")             echo "Goodbye!"; exit 0 ;;
    *)                  echo "Invalid option." ;;
  esac
done