{
  "openapi": "3.0.0",
  "paths": {
    "/api/ping": {
      "get": {
        "operationId": "PingController_ping",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Ping"
        ]
      }
    },
    "/api/auth/signup": {
      "post": {
        "operationId": "AuthController_signup",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/users": {
      "post": {
        "operationId": "UsersController_create",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{username}": {
      "get": {
        "operationId": "UsersController_findByUsername",
        "parameters": [
          {
            "name": "username",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/areas": {
      "get": {
        "operationId": "AreasController_find",
        "parameters": [
          {
            "name": "worldId",
            "required": false,
            "in": "query",
            "description": "Filter areas by world ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all areas"
          }
        },
        "summary": "Get all areas",
        "tags": [
          "areas"
        ]
      },
      "post": {
        "operationId": "AreasController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAreaDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The area has been successfully created."
          }
        },
        "summary": "Create a new area",
        "tags": [
          "areas"
        ]
      }
    },
    "/areas/{_id}": {
      "get": {
        "operationId": "AreasController_findById",
        "parameters": [
          {
            "name": "_id",
            "required": true,
            "in": "path",
            "description": "The ID of the area to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the area with the specified ID"
          },
          "404": {
            "description": "Area not found"
          }
        },
        "summary": "Get area by ID",
        "tags": [
          "areas"
        ]
      },
      "put": {
        "operationId": "AreasController_update",
        "parameters": [
          {
            "name": "_id",
            "required": true,
            "in": "path",
            "description": "The ID of the area to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAreaDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The area has been successfully updated."
          }
        },
        "summary": "Update an existing area",
        "tags": [
          "areas"
        ]
      },
      "delete": {
        "operationId": "AreasController_delete",
        "parameters": [
          {
            "name": "_id",
            "required": true,
            "in": "path",
            "description": "The ID of the area to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The area has been successfully deleted"
          },
          "404": {
            "description": "Area not found"
          }
        },
        "summary": "Delete an area",
        "tags": [
          "areas"
        ]
      }
    },
    "/areas/{_id}/map": {
      "get": {
        "operationId": "AreasController_getMap",
        "parameters": [
          {
            "name": "_id",
            "required": true,
            "in": "path",
            "description": "The ID of the area to get the map for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the map for the specified area"
          }
        },
        "summary": "Get map for an area",
        "tags": [
          "areas"
        ]
      }
    },
    "/worlds": {
      "get": {
        "operationId": "WorldsController_find",
        "parameters": [
          {
            "name": "shard",
            "required": false,
            "in": "query",
            "description": "Filter worlds by shard",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "techLevel",
            "required": false,
            "in": "query",
            "description": "Filter worlds by tech level",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all worlds"
          }
        },
        "summary": "Get all worlds",
        "tags": [
          "worlds"
        ]
      },
      "post": {
        "operationId": "WorldsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorldDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The world has been successfully created."
          }
        },
        "summary": "Create a new world",
        "tags": [
          "worlds"
        ]
      }
    },
    "/worlds/{_id}": {
      "get": {
        "operationId": "WorldsController_findById",
        "parameters": [
          {
            "name": "_id",
            "required": true,
            "in": "path",
            "description": "The ID of the world to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the world with the specified ID"
          },
          "404": {
            "description": "World not found"
          }
        },
        "summary": "Get world by ID",
        "tags": [
          "worlds"
        ]
      },
      "put": {
        "operationId": "WorldsController_update",
        "parameters": [
          {
            "name": "_id",
            "required": true,
            "in": "path",
            "description": "The ID of the world to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorldDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The world has been successfully updated."
          }
        },
        "summary": "Update an existing world",
        "tags": [
          "worlds"
        ]
      },
      "delete": {
        "operationId": "WorldsController_delete",
        "parameters": [
          {
            "name": "_id",
            "required": true,
            "in": "path",
            "description": "The ID of the world to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The world has been successfully deleted"
          },
          "404": {
            "description": "World not found"
          }
        },
        "summary": "Delete a world",
        "tags": [
          "worlds"
        ]
      }
    },
    "/identities": {
      "get": {
        "operationId": "IdentitiesController_find",
        "parameters": [
          {
            "name": "characterId",
            "required": false,
            "in": "query",
            "description": "Filter identity accounts by character ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all identity accounts"
          }
        },
        "summary": "Get all identity accounts",
        "tags": [
          "identities"
        ]
      },
      "post": {
        "operationId": "IdentitiesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIdentityAccountDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The identity account has been successfully created."
          }
        },
        "summary": "Create a new identity account",
        "tags": [
          "identities"
        ]
      }
    },
    "/identities/{_id}": {
      "get": {
        "operationId": "IdentitiesController_findById",
        "parameters": [
          {
            "name": "_id",
            "required": true,
            "in": "path",
            "description": "The ID of the identity account to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the identity account with the specified ID"
          },
          "404": {
            "description": "Identity account not found"
          }
        },
        "summary": "Get identity account by ID",
        "tags": [
          "identities"
        ]
      },
      "put": {
        "operationId": "IdentitiesController_update",
        "parameters": [
          {
            "name": "_id",
            "required": true,
            "in": "path",
            "description": "The ID of the identity account to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIdentityAccountDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The identity account has been successfully updated."
          }
        },
        "summary": "Update an existing identity account",
        "tags": [
          "identities"
        ]
      },
      "delete": {
        "operationId": "IdentitiesController_delete",
        "parameters": [
          {
            "name": "_id",
            "required": true,
            "in": "path",
            "description": "The ID of the identity account to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The identity account has been successfully deleted"
          },
          "404": {
            "description": "Identity account not found"
          }
        },
        "summary": "Delete an identity account",
        "tags": [
          "identities"
        ]
      }
    },
    "/characters": {
      "get": {
        "operationId": "CharactersController_find",
        "parameters": [
          {
            "name": "locationId",
            "required": false,
            "in": "query",
            "description": "Filter characters by location ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "worldId",
            "required": false,
            "in": "query",
            "description": "Filter characters by world ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all characters"
          }
        },
        "summary": "Get all characters",
        "tags": [
          "characters"
        ]
      },
      "post": {
        "operationId": "CharactersController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCharacterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The character has been successfully created."
          }
        },
        "summary": "Create a new character",
        "tags": [
          "characters"
        ]
      }
    },
    "/characters/{_id}": {
      "get": {
        "operationId": "CharactersController_findById",
        "parameters": [
          {
            "name": "_id",
            "required": true,
            "in": "path",
            "description": "The ID of the character to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the character with the specified ID"
          },
          "404": {
            "description": "Character not found"
          }
        },
        "summary": "Get character by ID",
        "tags": [
          "characters"
        ]
      },
      "put": {
        "operationId": "CharactersController_update",
        "parameters": [
          {
            "name": "_id",
            "required": true,
            "in": "path",
            "description": "The ID of the character to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCharacterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The character has been successfully updated."
          }
        },
        "summary": "Update an existing character",
        "tags": [
          "characters"
        ]
      },
      "delete": {
        "operationId": "CharactersController_delete",
        "parameters": [
          {
            "name": "_id",
            "required": true,
            "in": "path",
            "description": "The ID of the character to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The character has been successfully deleted"
          },
          "404": {
            "description": "Character not found"
          }
        },
        "summary": "Delete a character",
        "tags": [
          "characters"
        ]
      }
    }
  },
  "info": {
    "title": "Admin Gateway API",
    "description": "The Admin Gateway API provides access to administrative functions",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "admin",
      "description": ""
    },
    {
      "name": "areas",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "schemas": {
      "CreateAreaDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Descriptive name of the area"
          },
          "worldId": {
            "type": "string",
            "description": "Identifier of the world this area belongs to"
          },
          "parentId": {
            "type": "object",
            "description": "Identifier of the parent area, if any"
          },
          "position": {
            "type": "object",
            "description": "Central position of the area in 3D space",
            "properties": {
              "x": {
                "type": "number",
                "description": "X coordinate of the position, in meters from origin"
              },
              "y": {
                "type": "number",
                "description": "Y coordinate of the position, in meters from origin"
              },
              "z": {
                "type": "number",
                "description": "Z coordinate (height), in meters above ground"
              }
            }
          },
          "areaMap": {
            "type": "object",
            "description": "Map representation of this area",
            "properties": {
              "width": {
                "type": "number",
                "description": "Width of the map in cells"
              },
              "height": {
                "type": "number",
                "description": "Height of the map in cells"
              },
              "grid": {
                "type": "array",
                "description": "2D grid of map tiles",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "tags": {
            "type": "array",
            "description": "Tags for categorizing the area",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the area"
          },
          "landmarks": {
            "type": "array",
            "description": "Notable landmarks or features in this area",
            "items": {
              "type": "string"
            }
          },
          "connections": {
            "type": "array",
            "description": "Names of other areas this area connects to",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "worldId"
        ]
      },
      "UpdateAreaDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Descriptive name of the area"
          },
          "worldId": {
            "type": "string",
            "description": "Identifier of the world this area belongs to"
          },
          "parentId": {
            "type": "object",
            "description": "Identifier of the parent area, if any"
          },
          "position": {
            "type": "object",
            "description": "Central position of the area in 3D space",
            "properties": {
              "x": {
                "type": "number",
                "description": "X coordinate of the position, in meters from origin"
              },
              "y": {
                "type": "number",
                "description": "Y coordinate of the position, in meters from origin"
              },
              "z": {
                "type": "number",
                "description": "Z coordinate (height), in meters above ground"
              }
            }
          },
          "areaMap": {
            "type": "object",
            "description": "Map representation of this area",
            "properties": {
              "width": {
                "type": "number",
                "description": "Width of the map in cells"
              },
              "height": {
                "type": "number",
                "description": "Height of the map in cells"
              },
              "grid": {
                "type": "array",
                "description": "2D grid of map tiles",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "tags": {
            "type": "array",
            "description": "Tags for categorizing the area",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the area"
          },
          "landmarks": {
            "type": "array",
            "description": "Notable landmarks or features in this area",
            "items": {
              "type": "string"
            }
          },
          "connections": {
            "type": "array",
            "description": "Names of other areas this area connects to",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateWorldDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Descriptive name of the world"
          },
          "shard": {
            "type": "string",
            "description": "Shard identifier for the world"
          },
          "techLevel": {
            "type": "number",
            "description": "Technology level of the world"
          }
        },
        "required": [
          "name",
          "shard",
          "techLevel"
        ]
      },
      "UpdateWorldDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Descriptive name of the world"
          },
          "shard": {
            "type": "string",
            "description": "Shard identifier for the world"
          },
          "techLevel": {
            "type": "number",
            "description": "Technology level of the world"
          }
        }
      },
      "CreateIdentityAccountDto": {
        "type": "object",
        "properties": {
          "characterId": {
            "type": "string",
            "description": "Identifier of the character associated with this account"
          },
          "provider": {
            "type": "string",
            "description": "Identity provider platform"
          },
          "identifier": {
            "type": "string",
            "description": "Unique identifier for this account on the provider"
          },
          "credentials": {
            "description": "Authentication credentials for this account",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "characterId",
          "provider",
          "identifier"
        ]
      },
      "UpdateIdentityAccountDto": {
        "type": "object",
        "properties": {
          "characterId": {
            "type": "string",
            "description": "Identifier of the character associated with this account"
          },
          "provider": {
            "type": "string",
            "description": "Identity provider platform"
          },
          "identifier": {
            "type": "string",
            "description": "Unique identifier for this account on the provider"
          },
          "credentials": {
            "description": "Authentication credentials for this account",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "CreateCharacterDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Optional formal title (e.g., Sir, Lady)"
          },
          "firstName": {
            "type": "string",
            "description": "First, given name"
          },
          "lastName": {
            "type": "string",
            "description": "Last, family name"
          },
          "history": {
            "description": "Character's historical events",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "currentLocation": {
            "type": "string",
            "description": "Character's current location ID"
          },
          "worldId": {
            "type": "string",
            "description": "World ID this character belongs to"
          },
          "description": {
            "type": "string",
            "description": "Character's description"
          },
          "attributes": {
            "type": "object",
            "description": "Character's attributes"
          },
          "skills": {
            "description": "Character's skills",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "memories": {
            "description": "Character's memories",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "relations": {
            "description": "Character's relations with other characters",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "firstName",
          "lastName"
        ]
      },
      "UpdateCharacterDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Optional formal title (e.g., Sir, Lady)"
          },
          "firstName": {
            "type": "string",
            "description": "First, given name"
          },
          "lastName": {
            "type": "string",
            "description": "Last, family name"
          },
          "history": {
            "description": "Character's historical events",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "currentLocation": {
            "type": "string",
            "description": "Character's current location ID"
          },
          "worldId": {
            "type": "string",
            "description": "World ID this character belongs to"
          },
          "description": {
            "type": "string",
            "description": "Character's description"
          },
          "attributes": {
            "type": "object",
            "description": "Character's attributes"
          },
          "skills": {
            "description": "Character's skills",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "memories": {
            "description": "Character's memories",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "relations": {
            "description": "Character's relations with other characters",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      }
    }
  }
}